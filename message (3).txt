// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract ImTeacher {
    struct Student {
        string name;
        uint number;
        uint score;
        string grade;
        string[] classes;
    }

    // for empty student
    // 없는 학생 반환용
    Student noneExistStudent = Student("not exist", 0, 0, "-", new string[](0));


    // for auto number generate
    // 자동 번호 생성용용
    uint autoGeneratedNumber;

    Student[] students;


    // for list copy (use in S class)
    // S 클래스 학생 메소드에서 사용할 copy 함수
    function getCopyStudentList() private view returns(Student[] memory){        
        Student[] memory temp = new Student[](students.length);
        for (uint i = 0; i < students.length; i++) 
        {
            temp[i] = students[i];
        }
        return temp;
    }
     

    // private method in this contract
    // 밖에서는 접근 안되는 private 함수 (contract 안에서만 사용)
    function getGradeFromScore(uint _score) private pure returns (string memory){
        if(_score >= 90){
            return "A";
        }
        if(_score >= 80){
            return "B";
        }
        if(_score >= 70){
            return "C";
        }
        if(_score >= 60){
            return "D";
        }
        return "F";
    }

    /* 학생 추가 기능
      - 특정 학생의 정보를 추가
      */
    function addStudent(string memory _name, uint _score) public {
        string memory grade = getGradeFromScore(_score);
        uint number = ++autoGeneratedNumber;

        students.push(Student(_name, number, _score, grade, new string[](0)));
    }
      
    /* 학생 조회 기능(1)
      - 특정 학생의 번호를 입력하면 그 학생 전체 정보를 반환
      */
    function getStudentFromNumber(uint _num) public view returns (Student memory) {
        for (uint i = 0; i < students.length; i++) 
        {
            if(students[i].number == _num){
                return students[i];
            }
        }
        return noneExistStudent;
    }


    /* 학생 조회 기능(2)
      - 특정 학생의 이름을 입력하면 그 학생 전체 정보를 반환
      */      
    function getStudentFromName(string memory _name) public view returns (Student memory) {
        for (uint i = 0; i < students.length; i++) 
        {
            if(keccak256(bytes(students[i].name)) == keccak256(bytes(_name))){
                return students[i];
            }
        }
        return noneExistStudent;
    }


    /* 학생 점수 조회 기능
      - 특정 학생의 이름을 입력하면 그 학생의 점수를 반환
      */
    function getStudentScoreFromName(string memory _name) public view returns (uint) {
        for (uint i = 0; i < students.length; i++) 
        {
            if(keccak256(bytes(students[i].name)) == keccak256(bytes(_name))){
                return students[i].score;
            }
        }
        return 0;
    }

    /* 학생 전체 숫자 조회 기능
      - 현재 등록된 학생들의 숫자를 반환
      */
    function getWholeStudentNumber() public view returns (uint) {
        return students.length;
    }

    /* 학생 전체 정보 조회 기능
      - 현재 등록된 모든 학생들의 정보를 반환
      */
    function getWholeStudentInfo() public view returns (Student[] memory) {
        return students;
    }


    /* 학생들의 전체 평균 점수 계산 기능
      - 학생들의 전체 평균 점수를 반환
      */
    function getAvgStudentScore() public view returns (uint) {
        uint sum = 0;
        for (uint i = 0; i < students.length; i++) 
        {
            sum += students[i].score;
        }
        return sum / students.length;
    }

    /* 선생 지도 자격 자가 평가 시스템
      - 학생들의 평균 점수가 70점 이상이면 true, 아니면 false를 반환
      */
    function getEvalSystem() public view returns (bool) {
        if(getAvgStudentScore() >= 70){
            return true;
        }
        return false;
    }

    /* 보충반 조회 기능
      - F 학점을 받은 학생들의 숫자와 그 전체 정보를 반환
      */
    function getSupplyClassInfo() public view returns (uint, Student[] memory) {

        // get supply students number
        // 보충반 수업을 받아야 하는 학생들의 숫자 구하기
        uint num;
        for (uint i = 0; i < students.length; i++) 
        {
            if(keccak256(bytes(students[i].grade)) == keccak256(bytes("F"))){
                num++;
            }
        }

        // make supply student array which length is same with number
        // Student Array 를 만들기 (길이를 정해둠!)
        Student[] memory supplyStudents = new Student[](num);

        num = 0;
        for (uint i = 0; i < students.length; i++) 
        {
            if(keccak256(bytes(students[i].grade)) == keccak256(bytes("F"))){
                supplyStudents[num] = students[i];
                num++;
            }
        }

        return (num, supplyStudents);

    }


    /* S반 조회 기능
    - 가장 점수가 높은 학생 4명을 S반으로 설정하는데, 이 학생들의 전체 정보를 반환하는 기능 (S반은 4명으로 한정)
      */    
    function getSClassInfo() public view returns (Student[] memory) {
        if(students.length <= 4){
            return students;
        }

        // delete가 필요한데, 상태변수(storage)의 리스트를 지울 수는 없으니, copy 본을 하나 만든다.
        Student[] memory copyStudent = getCopyStudentList();
        
        // 4개 짜리 Student Array 를 지정한다. (위에서 4개 보다 적은거는 신경안써도 됨)
        Student[] memory result = new Student[](4);

        // we need 4 students each has maximum score && each process students should be delete
        // 4번의 프로세스를 돌 것이다. 각 프로세스 마다 가장 점수 높은 학생을 뽑아내어, result 에 추가하고, array 에서 삭제시킴.
        for(uint i = 0; i < 4; i++){
            uint maxScore = 0;
            uint deleteIndex = 0;

            for (uint j = 0; j < students.length; j++) 
            {
                if(maxScore < copyStudent[j].score){
                    maxScore = copyStudent[j].score;
                    deleteIndex = j;
                }
            }

            // push max score students at result && delete in array 
            // 이 프로세스에서 가장 높은 점수를 가진 학생을 result에 넣고, array 에서 delete
            result[i] = copyStudent[deleteIndex];
            delete copyStudent[deleteIndex];
        }       

        return result;
    }

}